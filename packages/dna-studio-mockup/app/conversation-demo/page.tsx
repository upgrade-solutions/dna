"use client"

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { 
  Brain, 
  MessageSquare, 
  Database, 
  GitBranch, 
  Users, 
  ListTodo, 
  FileAudio, 
  Zap,
  CheckCircle,
  Info
} from 'lucide-react'
import { ConversationVoiceCapture } from '@/components/conversation-voice-capture'
import { BusinessModelChange } from '@/hooks/use-conversation-capture'\n\nexport default function ConversationDemo() {\n  const [businessModelChanges, setBusinessModelChanges] = useState<BusinessModelChange[]>([])\n  const [manualInput, setManualInput] = useState('')\n  const [sessionId] = useState(`demo-${Date.now()}`)\n\n  const handleBusinessModelChange = (changes: BusinessModelChange[]) => {\n    setBusinessModelChanges(prev => [...prev, ...changes])\n  }\n\n  const sendManualInput = async () => {\n    if (!manualInput.trim()) return\n\n    try {\n      const response = await fetch('/api/intake/conversation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          sessionId,\n          transcriptChunk: manualInput,\n          chunkIndex: Date.now(),\n          forceAnalysis: true\n        })\n      })\n\n      if (response.ok) {\n        const result = await response.json()\n        if (result.businessModelChanges) {\n          handleBusinessModelChange(result.businessModelChanges)\n        }\n        setManualInput('')\n      }\n    } catch (error) {\n      console.error('Error sending manual input:', error)\n    }\n  }\n\n  const getChangeTypeIcon = (type: string) => {\n    switch (type) {\n      case 'workflow': return <GitBranch className=\"h-4 w-4\" />\n      case 'step': return <ListTodo className=\"h-4 w-4\" />\n      case 'actor': return <Users className=\"h-4 w-4\" />\n      case 'resource': return <FileAudio className=\"h-4 w-4\" />\n      case 'action': return <Zap className=\"h-4 w-4\" />\n      default: return <CheckCircle className=\"h-4 w-4\" />\n    }\n  }\n\n  const getOperationColor = (operation: string) => {\n    switch (operation) {\n      case 'create': return 'bg-green-100 text-green-800 border-green-300'\n      case 'update': return 'bg-blue-100 text-blue-800 border-blue-300'\n      case 'delete': return 'bg-red-100 text-red-800 border-red-300'\n      default: return 'bg-gray-100 text-gray-800 border-gray-300'\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2 flex items-center justify-center gap-2\">\n          <Database className=\"h-8 w-8 text-blue-500\" />\n          Business Model Conversation Demo\n        </h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Speak or type to describe workflow changes. The AI will analyze your conversation and \n          suggest modifications to your business model using the Actor > Action > Resource pattern.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Voice Capture */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Voice Input\n              </CardTitle>\n              <CardDescription>\n                Use voice capture to naturally describe workflow changes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ConversationVoiceCapture \n                onBusinessModelChange={handleBusinessModelChange}\n                sessionId={sessionId}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Manual Text Input */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5\" />\n                Manual Input\n              </CardTitle>\n              <CardDescription>\n                Type workflow descriptions for immediate analysis\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Describe a workflow change... e.g., 'The loan officer should verify income documents before the system checks credit score'\"\n                value={manualInput}\n                onChange={(e) => setManualInput(e.target.value)}\n                rows={3}\n              />\n              <Button \n                onClick={sendManualInput}\n                disabled={!manualInput.trim()}\n                className=\"w-full\"\n              >\n                Analyze Text\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Business Model Changes */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Business Model Changes\n                <Badge variant=\"secondary\">{businessModelChanges.length}</Badge>\n              </CardTitle>\n              <CardDescription>\n                AI-suggested modifications to your Actor > Action > Resource model\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {businessModelChanges.length === 0 ? (\n                <Alert>\n                  <Info className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    No changes detected yet. Start speaking or typing to see business model suggestions.\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {businessModelChanges.map((change, index) => (\n                    <div key={index} className=\"p-4 border rounded-lg space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {getChangeTypeIcon(change.changeType)}\n                          <span className=\"font-medium capitalize\">\n                            {change.operation} {change.changeType}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getOperationColor(change.operation)}>\n                            {change.operation}\n                          </Badge>\n                          <Badge variant=\"outline\">\n                            {Math.round(change.confidence * 100)}%\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-sm text-muted-foreground\">\n                        {change.reasoning}\n                      </p>\n                      \n                      {change.data && (\n                        <div className=\"bg-muted p-3 rounded text-sm\">\n                          {change.changeType === 'step' ? (\n                            <div className=\"font-mono\">\n                              <span className=\"text-blue-600\">{change.data.actor}</span>\n                              {' > '}\n                              <span className=\"text-green-600\">{change.data.action}</span>\n                              {' > '}\n                              <span className=\"text-purple-600\">{change.data.resource}</span>\n                            </div>\n                          ) : change.changeType === 'workflow' ? (\n                            <div>\n                              <div className=\"font-medium\">{change.data.name}</div>\n                              <div className=\"text-xs text-muted-foreground\">{change.data.description}</div>\n                            </div>\n                          ) : (\n                            <div className=\"font-mono text-xs\">\n                              {JSON.stringify(change.data, null, 2)}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                      \n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(change.timestamp).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Example Inputs */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Example Inputs to Try</CardTitle>\n          <CardDescription>\n            Copy and paste these examples to see how the AI interprets workflow changes\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">New Workflow Step:</h4>\n              <p className=\"text-sm bg-muted p-3 rounded\">\n                \"After the customer submits their application, the system should automatically send a confirmation email to the customer.\"\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Process Change:</h4>\n              <p className=\"text-sm bg-muted p-3 rounded\">\n                \"The risk assessment should happen before the loan officer reviews the application, not after.\"\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">New Actor:</h4>\n              <p className=\"text-sm bg-muted p-3 rounded\">\n                \"We need a compliance officer to review all high-value loan applications before approval.\"\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Resource Addition:</h4>\n              <p className=\"text-sm bg-muted p-3 rounded\">\n                \"The underwriter needs access to the customer's tax documents when making approval decisions.\"\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}"